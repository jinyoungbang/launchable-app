import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import styles from "../../styles/settings/Edit.module.css";
import Header from "../../components/main/Header";
import { FaTimes } from "react-icons/fa";
import { Formik, Form, Field } from "formik";
import { Input, Button, FormControl, Avatar, Center } from "@chakra-ui/react";
import useSWR from "swr";
import axios from "axios";

import { useAuth } from "../../components/auth/AuthContext";

export default function SettingsEdit() {
  const { currentUser, userData } = useAuth();

  const router = useRouter();
  if (currentUser) {
    if (!userData) return "loading";
  } else {
    router.push("/signup");
  }
  const fetcher = (url) =>
    axios({
      method: "post",
      url: url,
      data: JSON.stringify({
        id: userData.id,
      }),
      headers: {
        "Content-Type": "application/json",
      },
    }).then((res) => {
      return res.data.userData;
    });
  const { data, error } = useSWR(
    process.env.NEXT_PUBLIC_API_ROUTE + "api/auth",
    fetcher
  );
  const editUser = (id, username, displayName, about, twitterUrl) => {
    console.log(about)
    axios({
      method: "patch",
      url: process.env.NEXT_PUBLIC_API_ROUTE + "api/settings",
      data: JSON.stringify({
        id: id,
        userData: {
          username: username,
          profile: {
            display_name: displayName,
            about: about,
            profile_links: {
              twitter: twitterUrl,
            },
          },
        },
      }),
      headers: {
        "Content-Type": "application/json",
      },
    }).then((res) => {
      console.log(res);
      if (res.status === 200) router.push("/settings");
      else console.log("error");
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Launchable</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Formik
        initialValues={{
          username: data && data.username,
          name: data && data.profile.display_name,
          about: data && data.profile.about,
          twitterUrl: data && data.profile.profile_links.twitter,
        }}
        onSubmit={(values, actions) => {
          const id = userData.id;
          const username = values.username;
          const displayName = values.name;
          const about = values.about;
          const twitterUrl = values.twitterUrl;
          editUser(id, username, displayName, about, twitterUrl);
        }}
      >
        {(props) => (
          <Form>
            <div className={styles.headerContainer}>
              <Avatar
                src={
                  "https://velog.velcdn.com/images/jinyoungbang/profile/f2430d79-f855-4ffd-9b97-66cc5b686784/image.jpeg"
                }
                style={{
                  height: "10rem",
                  width: "10rem",
                }}
              />
              <div className={styles.usernameContainer}>
                <div className={styles.usernameEditContainer}>
                  <h2>프로필 수정하기</h2>
                  <Link href="/settings">
                    <Button
                      variant="solid"
                      style={{
                        backgroundColor: "#038A64",
                        color: "#FFFFFF",
                        marginLeft: "1rem",
                        height: "2.5rem",
                        width: "2.5rem",
                      }}
                    >
                      <Center>
                        <FaTimes style={{ color: "#ffffff" }} />
                      </Center>
                    </Button>
                  </Link>
                </div>
                <p>Click your avatar to upload a new one.</p>
              </div>
            </div>
            <div className={styles.fieldsContainer}>
              <h3>아이디</h3>
              <Field name="username">
                {({ field, form }) => (
                  <FormControl>
                    <Input {...field} id="username" />
                  </FormControl>
                )}
              </Field>
              <h3>이름</h3>
              <Field name="name">
                {({ field, form }) => (
                  <FormControl>
                    <Input {...field} id="name" />
                  </FormControl>
                )}
              </Field>
              <h3>자기소개</h3>
              <Field name="about">
                {({ field, form }) => (
                  <FormControl>
                    <Input {...field} id="about" />
                  </FormControl>
                )}
              </Field>
              <h3>소셜 미디어</h3>
              <h3>트위터</h3>
              <Field name="twitterUrl">
                {({ field, form }) => (
                  <FormControl>
                    <Input {...field} id="twitterUrl" />
                  </FormControl>
                )}
              </Field>
            </div>
            <Button
              type="submit"
              variant="solid"
              style={{
                backgroundColor: "#038A64",
                color: "#FFFFFF",
              }}
            >
              저장
            </Button>
          </Form>
        )}
      </Formik>

      <br />
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          2022, Launchable by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
