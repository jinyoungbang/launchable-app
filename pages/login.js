import Head from "next/head";
import { useRouter } from "next/router";
import styles from "../styles/Login.module.css";
import mainStyles from "../styles/Main.module.css"
import { useState, useEffect } from "react";
import Header from "../components/main/Header";
import { Input, Button, FormControl } from "@chakra-ui/react";
import {
  signInWithEmailAndPassword,
  signOut,
  signInWithPopup,
  GoogleAuthProvider,
  TwitterAuthProvider,
} from "firebase/auth";
import firebase from "../config/firebase";
import { Formik, Form, Field, FormErrorMessage } from "formik";
import MainButton from "../components/assets/MainButton";
import { FcGoogle } from "react-icons/fc";
import { FaTwitter, FaFacebookSquare } from "react-icons/fa";
import axios from "axios";
import { useAuth } from "../components/auth/AuthContext";
import Loader from "../components/main/Loader";

const googleProvider = new GoogleAuthProvider();
const twitterProvider = new TwitterAuthProvider();

function validateName(value) {
  let error;
  if (!value) {
    error = "Name is required";
  }
  return error;
}

export default function Login() {
  const router = useRouter();
  const { currentUser, userData } = useAuth();

  const [isWidthMinimized, setIsWidthMinimized] = useState(false);
  const [isError, setIsError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  const handleResize = () => {
    if (window.innerWidth < 544) {
      setIsWidthMinimized(true);
    } else {
      setIsWidthMinimized(false);
    }
  };

  useEffect(() => {
    if (userData) router.push("/");
    else setIsLoading(false);
    if (window.innerWidth < 544) {
      setIsWidthMinimized(true);
    } else {
      setIsWidthMinimized(false);
    }
    window.addEventListener("resize", handleResize);
  }, [userData]);

  const checkIfUserIdExists = (id) => {
    axios({
      method: "get",
      url: process.env.NEXT_PUBLIC_API_ROUTE + "api/auth/" + id,
    }).then((res) => {
      const userExists = res.data.userExists;
      if (userExists) {
        setIsLoading(true);
        router.push("/");
      } else {
        signOut(firebase.auth).then(() => {
          setErrorMessage("회원가입 하시고 로그인을 해주세요!");
          setIsError(true);
        });
      }
    });
  };

  const googleLogin = () => {
    signInWithPopup(firebase.auth, googleProvider)
      .then((result) => {
        const user = result.user;
        checkIfUserIdExists(user.uid);
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
      });
  };

  const twitterLogin = () => {
    signInWithPopup(firebase.auth, twitterProvider)
      .then((result) => {
        const user = result.user;
        checkIfUserIdExists(user.uid);
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        console.log(errorMessage);
        // ...
      });
  };

  if (isLoading) return <Loader />;

  return (
    <div>
      <Head>
        <title>로그인</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <div className={styles.formContainer}>
        <Formik
          initialValues={{ email: "", password: "" }}
          onSubmit={(values, actions) => {
            signInWithEmailAndPassword(firebase.auth, values.email, values.password)
              .then((userCredential) => {
                // Signed in
                const user = userCredential.user;
                checkIfUserIdExists(user.uid);
                setIsError(false);
                // ...
              })
              .catch((error) => {
                const errorCode = error.code;
                const errorMessage = error.message;
                actions.setSubmitting(false);
                setErrorMessage("이메일 아니면 비밀번호가 틀렸습니다.");
                setIsError(true);
              });
          }}
        >
          {(props) => (
            <Form
              style={isWidthMinimized ? { width: "100%" } : { width: "49%" }}
            >
              <Field name="email" validate={validateName}>
                {({ field, form }) => (
                  <FormControl
                    isInvalid={form.errors.name && form.touched.name}
                  >
                    <h3>이메일</h3>
                    <Input
                      {...field}
                      type={"email"}
                      placeholder="이메일"
                      id="email"
                    />
                    {/* <FormErrorMessage>{"lol"}</FormErrorMessage> */}
                  </FormControl>
                )}
              </Field>
              <Field name="password" validate={validateName}>
                {({ field, form }) => (
                  <FormControl
                    isInvalid={form.errors.name && form.touched.name}
                  >
                    <h3>비밀번호</h3>
                    <Input
                      {...field}
                      type={"password"}
                      placeholder="비밀번호"
                      id="password"
                    />
                  </FormControl>
                )}
              </Field>
              {isError ? (
                <p
                  style={{
                    color: "#F56565",
                    fontSize: "0.8rem",
                    fontWeight: "500",
                    marginTop: "0.5rem",
                  }}
                >
                  {errorMessage}
                </p>
              ) : null}
              <div className={styles.buttonContainer}>
                <MainButton
                  isDisabled={
                    props.values.email === "" || props.values.password === ""
                  }
                  isLoading={props.isSubmitting}
                  type="submit"
                  text="로그인"
                />
                <p style={{ margin: "0 1rem" }}>또는</p>
                <button
                  className={styles.iconButton}
                  style={{ border: "1px solid #DEE2E6" }}
                  onClick={googleLogin}
                >
                  <FcGoogle className={styles.socialIcon} />
                </button>
                <button
                  className={styles.iconButton}
                  style={{ backgroundColor: "#1e99e6", marginLeft: "0.25rem" }}
                  onClick={twitterLogin}
                >
                  <FaTwitter
                    className={styles.socialIcon}
                    style={{ color: "white" }}
                  />
                </button>
                {/* <button
                  className={styles.iconButton}
                  style={{ backgroundColor: "#3b5897", marginLeft: "0.25rem" }}
                >
                  <FaFacebookSquare
                    className={styles.socialIcon}
                    style={{ color: "white" }}
                  />
                </button> */}
              </div>
            </Form>
          )}
        </Formik>
        {isWidthMinimized ? null : (
          <div style={{ width: "49%" }} className={styles.contentContainer}>
            <h1 style={{fontWeight: 600}}>Launchable에서 로그인을 하세요!</h1>
            <br></br>
            <h1>개인 사업를 운영하는 다른 파운더들과 소통하세요.</h1>
            <br></br>
            <h1>
              아이디어, 랜딩 페이지 등에 대한 피드백을 받으십시오.
            </h1>
            <br />
            {/* <h1>Get the best new stories from founders in your inbox.</h1> */}
          </div>
        )}
      </div>
    </div>
  );
}
